// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User
model User {
  id             String          @id @unique
  name           String
  email          String
  profilePicture String
  role           String
  forumPosts     ForumPosts[]
  blogPosts      BlogPosts[]
  forumComments  ForumComments[]
  blogComments   BlogComments[]
}

// Forum Posts
model ForumPosts {
  id        String          @id @default(cuid())
  title     String
  body      String
  authorId  String
  author    User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes     String          @default("[]")
  dislikes  String          @default("[]")
  // As SQLite does not Support Scaler List not JSON, so we will use JSON.stringify and JSON.parse to save the UIDs of the Users
  comments  ForumComments[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

// Forum Posts Comments
model ForumComments {
  id        String     @id @default(cuid())
  comment   String
  authorId  String
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String
  post      ForumPosts @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// Blog Posts
model BlogPosts {
  id        String         @id @default(cuid())
  url       String         @unique
  title     String
  body      String
  authorId  String
  author    User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  BlogComments[]
  visitors  Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

// Blog Posts Comments
model BlogComments {
  id        String    @id @default(cuid())
  comment   String
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String
  post      BlogPosts @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
